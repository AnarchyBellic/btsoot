#!/usr/bin/env python3.6

THIS SHOULD MAKE CI FAIL

import sys
import os
import time
import shutil


class color:
	HEADER = '\033[95m'
	OKBLUE = '\033[94m'
	OKGREEN = '\033[92m'
	WARNING = '\033[93m'
	FAIL = '\033[91m'
	ENDC = '\033[0m'
	BOLD = '\033[1m'
	UNDERLINE = '\033[4m'


debug = False
if "--debug" in sys.argv:
	debug = True
def dprint(message):
	if debug == True:
		print(f"DEBUG: {message}") 


def crc(filepath):
    previous = 0
    for line in open(filepath,"rb"):
        previous = zlib.crc32(line, previous)
    return "%X"%(previous & 0xFFFFFFFF)


usage = f"""USAGE: {sys.argv[0]} <commands>

add <name> <path> <server/local>\tadd block
rm <name>\t\t\t\tremove added block
scan <name>\t\t\t\tscan added block
backup <name>\t\t\t\tbackup scanned block
update_dependencies\t\t\tupdate the needed libraries
"""


def split(string, splitters): #MAY RESOLVE ALL PROBLEMS WITH CSV
	final = [string]
	for x in splitters:
		for i,s in enumerate(final):
			if x in s and x != s:
				left, right = s.split(x, 1)
				final[i] = left
				final.insert(i+1, x)
				final.insert(i+2, right)
	return final


def scandirectory(walk_dir, scanfile, verbose = False):
	try:
		with open(scanfile, "w") as f:
			for root, subdirs, files in os.walk(walk_dir):
				f.write(root + "\n")
				for filename in files:
					file_path = os.path.join(root, filename)
					checksum = crc(file_path)
					if verbose == True:
						print(file_path, checksum, end="\n")
					else:
						pass
					f.write(file_path + "," + checksum + "\n")
	except FileNotFoundError:
		if verbose == True:
			print(color.FAIL + "File not found." + color.ENDC)
		else:
			pass


def main():
	try:
		if sys.argv[1] == "add":
			try:
				name = sys.argv[2]
				path = sys.argv[3]
				server = sys.argv[4]
			except IndexError:
				print(usage)
				sys.exit()
			with open("btsoot.conf", "a") as f:
				f.write("name=" + name + '\n')
				f.write("path=" + path + '\n')
				f.write("server=" + server + '\n')
			print(color.OKGREEN + "Done." + color.ENDC)


		elif sys.argv[1] == "rm":
			try:
				name = sys.argv[2]
			except IndexError:
				print("Usage: " + sys.argv[0] + "rm name")
				exit()
			try:
				f = open("btsoot.conf", "r")
				row = 0
				beginning_row = -10
				indentifier = "name=" + name + '\n'
				lines = f.readlines()
				f.close()
				f = open("btsoot.conf", "w")
				for line in lines:
					row = row + 1
					if line == indentifier:
						beginning_row = row
					elif row == beginning_row + 1 or row == beginning_row + 2:
						pass
					else:
						f.write(line)
				f.close()
				print(color.OKGREEN + "Done." + color.ENDC)
			except FileNotFoundError:
				print(color.FAIL + "Configfile not found." + color.ENDC)
				print("Create one with 'add'.")


		elif sys.argv[1] == "scan":
			#REMOVE ENTREE FROM BTSOOT CONFIG
			searched_path = None
			try:
				name = sys.argv[2]
				scanfilename = "{}_{}.btsscan".format(int(time.time()), name)
			except IndexError:
				print("Usage: " + sys.argv[0] + "scan name")
			try:
				f = open("btsoot.conf", "r")
				row = 0
				beginning_row = -1 #set counter to a negative state so it won't find any rows
				identifier = "name=" + name + '\n'
				lines = f.readlines()
				f.close()
				for line in lines:
					row = row + 1
					if line == identifier:
						beginning_row = row
					elif row == beginning_row + 1:
						searched_path = line
						break
					else:
						pass
				path_with_newline = split(searched_path, "=")
				tempstring = path_with_newline[2]
				path = tempstring.rstrip() #GETS RID OF NEWLINE
				print(f"Initializing scan for {path}")

			except FileNotFoundError:
				print("Configfile not found. Create one with 'add'.")
			scandirectory(path, scanfilename, False)
			print(color.OKGREEN + "Done." + color.ENDC)


		elif sys.argv[1] == "backup":
			#LIST FILES TO FIND SCANFILES
			#SORT OUT ANY UNINTERESTING FILES
			scanfilelist = []
			dirs = os.listdir("./")
			number_of_files = 0
			for file in dirs:
				blockname = split(file, ["_", "."])
				try:
					if blockname[4] == "btsscan" and blockname[2] == sys.argv[2]:
						number_of_files = number_of_files + 1
						scanfilelist.append(file)
					else:
						pass
				except IndexError:
					pass

			if number_of_files == 0:
				print("There aren't any scan files.")
				print(f"Create one by using\n{sys.argv[0]} scan <block name>.")

			elif number_of_files == 1:
				print("Only one scanfile found. A complete backup of ALL data will be created.")
				print("This may take a long time.")
				#TODO: TRANSFER FILE TO SERVER, RESOLVE SERVER ADDR
				# FIND SERVER ADDRESS 
				#TODO THIS NEEDS TO BE A FUNCTION
				#TODO REFACTOR
				searched_row = None
				source_location = None
				f = open("btsoot.conf", "r")
				row = 0
				beginning_path = -1
				identifier = "name=" + sys.argv[2] + '\n'
				lines = f.readlines()
				f.close()
				for line in lines:
					row = row + 1
					if line == identifier:
						beginning_row = row
					if row == beginning_row + 1:
						sourcelocation = line
					if row == beginning_row + 2:
						searched_path = line
					else:
						pass
				serverstring = split(searched_path.rstrip(), "=")
				serverlocation = serverstring[2]
				sourcelocation = split(sourcelocation.rstrip(), "=")
				sourcelocation = sourcelocation[2]
				
				#COPY ANYTHING
				shutil.copytree(sourcelocation, f"{serverlocation}{sourcelocation}")

			else:
				print("Sufficient number of scan files were found.")
				splitted_timestamp = []

				# FIND SERVER ADDRESS
				searched_row = None
				f = open("btsoot.conf", "r")
				row = 0
				beginning_path = -1
				indentifier = "name=" + sys.argv[2] + '\n'
				lines = f.readlines()
				f.close()

				for line in lines:
					row = row + 1
					if line == indentifier:
						beginning_row = row
					if row == beginning_row + 2:
						searched_path = line
					else:
						pass

				serverstring = split(searched_path.rstrip(), "=")
				serverlocation = serverstring[2]

				#FIND LATEST TWO FILES
				#SPLIT EVERY FILE NAME TO GAIN TIMESTAMP
				for scanfile in scanfilelist:
					temp = split(scanfile, "_")
					splitted_timestamp.append(int(temp[0]))

				#GETS LATEST SCANFILE'S TIMESTAMP
				latest_timestamp = max(splitted_timestamp)

				#SETS MAX VALUE TO -1 TO FIND SECOND HIGHEST VALUE
				listcounter = 0
				for timestamp in splitted_timestamp:
					if timestamp == latest_timestamp:
						splitted_timestamp[listcounter] = -1
					listcounter = listcounter + 1

				#GET PREVIOUS FILE'S TIMESTAMP
				previous_timestamp = max(splitted_timestamp)

				dircounter = 0
				latest_scan_array_index = -1
				previous_scan_array_index = -1
				for file in scanfilelist:
					temp = split(file, "_")
					#print(f"Check {temp[0]} against {latest_timestamp} and {previous_timestamp}")
					if int(temp[0]) == latest_timestamp:
						latest_scan_array_index = dircounter
					elif int(temp[0]) == previous_timestamp:
						previous_scan_array_index = dircounter
					else:
						pass
					dircounter = dircounter + 1

				print("Latest scan: " + scanfilelist[latest_scan_array_index])
				print("Previous scan: " + scanfilelist[previous_scan_array_index] + "\n")

				#COMPARE THE TWO FILES AGAINST EACH OTHER
				latest_scan_fd = open(scanfilelist[latest_scan_array_index], "r")
				previous_scan_fd = open(scanfilelist[previous_scan_array_index], "r")
				transmit_list_fd = open("transmit.list", "w+")

				latest_scan = latest_scan_fd.readlines()
				previous_scan = previous_scan_fd.readlines()

				file_same = 0
				file_new = 0
				file_total_old = 0
				file_total_latest = 0


				#REMOVE DELETED OR CHANGED FILES
				oldline_total = 0
				for oldline in previous_scan:
					if oldline not in latest_scan:
						checkifdir = split(oldline, ",")
						if len(checkifdir) == 1:
							#IF DIRECTORY, HASH WILL BE "directory".
							#THAT IS NEEDED DURING DIRECTORY REMOVAL
							transmit_list_fd.write(f"{oldline.rstrip()},directory,-\n")
							print(color.FAIL + f"- {oldline}" + color.ENDC, end='')
						else:
							transmit_list_fd.write(f"{oldline.rstrip()},-\n")
							print(color.FAIL + f"- {oldline}" + color.ENDC, end='')
							oldline_total = oldline_total + 1
					file_total_old = file_total_old + 1


				#FIND OUT CHANGED OR NEW FILES
				for line in latest_scan:
					if line in previous_scan:
						file_same = file_same + 1
					else:
						checkifdir = split(line, ",")
						if len(checkifdir) == 1:
							#IF DIRECTORY, HASH WILL BE "directory".
							#THAT IS NEEDED DURING DIRECTORY CREATION
							transmit_list_fd.write(f"{line.rstrip()},directory,+\n")
							print(color.OKGREEN + f"+ {line}" + color.ENDC, end='')
						else:
							transmit_list_fd.write(f"{line.rstrip()},+\n")
							print(color.OKGREEN + f"+ {line}" + color.ENDC, end='')
							file_new = file_new + 1
					file_total_latest = file_total_latest + 1


				#FILE STATS
				block_change_percentage = int((file_total_old / file_total_latest) * 100)
				print(f"\nUnchanged files: {file_same}")
				print(f"New/Changed files: {file_new}")
				print(f"Deleted files: {oldline_total}")
				print(f"Total files in latest scan: {file_total_latest}")
				print(f"Total files in previous scan: {file_total_old}")
				#TODO: This is broken... Fix needed.
				#print(color.OKBLUE + f"Block file number changed by {block_change_percentage}%" + color.ENDC)

				#TRANSMITTER
				print(color.OKBLUE + "Initializing Filetransfer" + color.ENDC)
				transmit_list_fd.seek(0) #SET FILE POINTER TO START
				transmit = transmit_list_fd.readlines()
				transmit_list_linenumber = 0
				for line in transmit:
					transmit_list_linenumber = transmit_list_linenumber + 1
					line = split(line.rstrip(), ",")
					if line[4] == "-":
						#print(f"REMOVING:{serverlocation}{line[0]}")
						if line[2] == "directory":
							print(color.FAIL + "RMTREE" + color.ENDC)
							try:
								shutil.rmtree(f"{serverlocation}{line[0]}")
							except FileNotFoundError:
								pass
						else:
							try:
								os.remove(f"{serverlocation}{line[0]}")
							except FileNotFoundError:
								pass
					elif line[4] == "+":
						#print(f"COPYING:{line[0]} -> {serverlocation}{line[0]}")
						if line[2] == "directory":
							#print(color.FAIL + "MAKEDIRS" + color.ENDC)
							"""
							path = split(line[0],"/")
							lengh = len(line)
							print(path[0:lengh-1])
							input()
							"""
							os.makedirs(f"{serverlocation}{line[0]}", exist_ok=True)
						else:
							#print(f"PATH:{line[0]} to {serverlocation}{line[0]}")
							shutil.copyfile(line[0], f"{serverlocation}{line[0]}")
							shutil.copystat(line[0], f"{serverlocation}{line[0]}")
					else:
						print(color.WARNING + "transmit.list is corrupted" + color.ENDC)
						print(color.WARNING + line + color.ENDC)

				previous_scan_fd.close() 
				latest_scan_fd.close()
				transmit_list_fd.close()
				os.remove("transmit.list")
				print(color.OKGREEN + "Done." + color.ENDC)


		else:
			print(usage)

	except IndexError:
		print(usage)
		sys.exit()
"""
	except:
		print(color.FAIL + "\nCRITICAL ERROR\n" + color.ENDC + " Please file a bug report at")
		print("- https://git.paukra.com/open-source/btsoot or mail it to")
		print("- pjkramme@gmail.com")
"""

if __name__ == "__main__":
	try:
		main()
	except KeyboardInterrupt:
		print("\nInterrupted by keyboard. Quitting.\n")
		#CLOSING ANY OPEN FD's
		previous_scan_fd.close()
		latest_scan_fd.close()
		transmit_list_fd.close()
		sys.exit()
